//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class ServiceAddressWrapper {

	public class TimeZone {
		public String timeZone {get;set;} 
		public Integer gmtOffset {get;set;} 
		public Boolean observesDST {get;set;} 

		public TimeZone(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'timeZone') {
							timeZone = parser.getText();
						} else if (text == 'gmtOffset') {
							gmtOffset = parser.getIntegerValue();
						} else if (text == 'observesDST') {
							observesDST = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'TimeZone consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Address {
		public String streetNumber {get;set;} 
		public String streetName {get;set;} 
		public String streetSuffix {get;set;} 
		public String city {get;set;} 
		public String state {get;set;} 
		public String zipCode {get;set;} 

		public Address(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'streetNumber') {
							streetNumber = parser.getText();
						} else if (text == 'streetName') {
							streetName = parser.getText();
						} else if (text == 'streetSuffix') {
							streetSuffix = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'state') {
							state = parser.getText();
						} else if (text == 'zipCode') {
							zipCode = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Address consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public List<String> offers {get;set;} 
	public Address address {get;set;} 
	public ServiceAddressMasterId ServiceAddressMasterId {get;set;} 
	public TelephoneNumber telephoneNumber {get;set;} 
	public TimeZone timeZone {get;set;} 
	public String buildingType {get;set;} 
	public String buildingUse {get;set;} 
	public String plantArea {get;set;} 
	public String plantType {get;set;} 
	public Integer homingExchange {get;set;} 
	public String tariff {get;set;} 
	public String rateCenter {get;set;} 
	public Integer wireCenter {get;set;} 
	public String centralOfficeClliCode {get;set;} 
	public String remoteOfficeClliCode {get;set;} 
	public Boolean isHoaRestrictedAddress {get;set;} 
	public Boolean hasActiveServiceAtAddress {get;set;} 
	public Boolean isPaClecAddress {get;set;} 
	public Boolean hasLocalFranchiseAgreement {get;set;} 
	public String proximityToFootprint {get;set;} 
	public String fiberBuildOutProjectId {get;set;} 
	public String fiberBuildOutStatus {get;set;} 
	public List<Technology> technology {get;set;} 
    public Boolean FiberProductCapableFlag {get;set;}
    public Boolean HSICapableFlag {get;set;}
    public Boolean FBV_Available {get;set;}
    public Boolean FiberVideoAvailableFlag {get;set;}
    public Boolean UVerseCapable {get;set;}
    public Boolean POTSCapable {get;set;}
    public String availableMaxProductSpeed{get;set;}
    public String AccountSpeed{get;set;}
    public String HighestAvailableSpeed{get;set;}
    public String RecordId{get;set;}

	public ServiceAddressWrapper(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'offers') {
						offers = arrayOfString(parser);
					} else if (text == 'address') {
						address = new Address(parser);
					} else if (text == 'ServiceAddressMasterId') {
						ServiceAddressMasterId = new ServiceAddressMasterId(parser);
					} else if (text == 'telephoneNumber') {
						telephoneNumber = new TelephoneNumber(parser);
					} else if (text == 'timeZone') {
						timeZone = new TimeZone(parser);
					} else if (text == 'buildingType') {
						buildingType = parser.getText();
					} else if (text == 'buildingUse') {
						buildingUse = parser.getText();
					} else if (text == 'plantArea') {
						plantArea = parser.getText();
					} else if (text == 'plantType') {
						plantType = parser.getText();
					} else if (text == 'homingExchange') {
						homingExchange = parser.getIntegerValue();
					} else if (text == 'tariff') {
						tariff = parser.getText();
					} else if (text == 'rateCenter') {
						rateCenter = parser.getText();
					} else if (text == 'wireCenter') {
						wireCenter = parser.getIntegerValue();
					} else if (text == 'centralOfficeClliCode') {
						centralOfficeClliCode = parser.getText();
					} else if (text == 'remoteOfficeClliCode') {
						remoteOfficeClliCode = parser.getText();
					} else if (text == 'isHoaRestrictedAddress') {
						isHoaRestrictedAddress = parser.getBooleanValue();
					} else if (text == 'hasActiveServiceAtAddress') {
						hasActiveServiceAtAddress = parser.getBooleanValue();
					} else if (text == 'isPaClecAddress') {
						isPaClecAddress = parser.getBooleanValue();
					} else if (text == 'hasLocalFranchiseAgreement') {
						hasLocalFranchiseAgreement = parser.getBooleanValue();
					} else if (text == 'proximityToFootprint') {
						proximityToFootprint = parser.getText();
					} else if (text == 'fiberBuildOutProjectId') {
						fiberBuildOutProjectId = parser.getText();
					} else if (text == 'fiberBuildOutStatus') {
						fiberBuildOutStatus = parser.getText();
					} else if (text == 'technology') {
						technology = arrayOfTechnology(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'ServiceAddressWrapper consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Technology {
		public String name {get;set;} 
		public String medium {get;set;} 
		public String group_Z {get;set;} // in json: group
		public String marketingSpeed {get;set;} 
		public List<String> features {get;set;} 
        public String techFeature{
            get {
                return features != null && !features.isEmpty() ? String.join(features, ',') : '';
            }
            set;
        }

		public Technology(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'medium') {
							medium = parser.getText();
						} else if (text == 'group') {
							group_Z = parser.getText();
						} else if (text == 'marketingSpeed') {
							marketingSpeed = parser.getText();
						} else if (text == 'features') {
							features = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Technology consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class TelephoneNumber {
		public String telephoneNumber {get;set;} 

		public TelephoneNumber(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'telephoneNumber') {
							telephoneNumber = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'TelephoneNumber consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ServiceAddressMasterId {
		public Integer controlNumber {get;set;} 
		public String environment {get;set;} 

		public ServiceAddressMasterId(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'controlNumber') {
							controlNumber = parser.getIntegerValue();
						} else if (text == 'environment') {
							environment = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ServiceAddressMasterId consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static ServiceAddressWrapper parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new ServiceAddressWrapper(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	





    private static List<Technology> arrayOfTechnology(System.JSONParser p) {
        List<Technology> res = new List<Technology>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Technology(p));
        }
        return res;
    }


    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }
}